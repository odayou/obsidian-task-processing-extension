/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TimeDiffPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var TimeDiffPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      var taskExp = /\s*-\s+\[(\s|\w)\]\s+/g
      this.addCommand({
        id: "task-processing-extension-compute-time-total",
        name: "time total",
        editorCallback: (editor, view) => {

            let notice = "### 工时统计\n---\n";
            const file = this.app.workspace.getActiveFile();
    

            let data = editor.editorComponent.view.data;
                let allSum = 0;
                data.split("\n").forEach((row) => {
                  if (row.match(taskExp) == null) {
                    return;
                  }
                  const extractedWithoutCodeblocks = row.replaceAll(taskExp, "");
                  let [taskName, totalSumInMinutes] = computeTaskTime(extractedWithoutCodeblocks)
                  allSum += totalSumInMinutes;
                  notice += `${taskName}: ${minutesToHours(totalSumInMinutes)}\n`;
                })
                notice += `\n\n---\n工作总时长花费:${minutesToHours(allSum)}小时\n\n最后统计时间: ${new Date().toLocaleString()}\n\n---\n`;
                editor.replaceRange(notice, editor.getCursor());
          }
      });
 
      this.addCommand({
          id: "task-processing-extension-add-checkbox-no-checked",
          name: "Insert Checkbox noChecked",
          editorCallback: (editor) => {
            editor.replaceSelection("- [ ] ");
          }
        });
      
      this.addCommand({
          id: "task-processing-extension-add-checkbox-checked",
          name: "Insert Checkbox Checked",
          editorCallback: (editor) => {
            editor.replaceSelection("- [x] ");
          }
      });

      this.addCommand({
        id: "task-processing-extension-insert-time-clock",
        name: "Insert Now Time Clock",
        editorCallback: (editor) => {
            const date = new Date();
            const year = date.getFullYear();  
            const month = (date.getMonth() + 1).toString().padStart(2, '0');  
            const day = date.getDate().toString().padStart(2, '0');
            const hour = date.getHours().toString().padStart(2, '0');
            const minute = date.getMinutes().toString().padStart(2, '0');  
            editor.replaceSelection(`${hour}:${minute}`);
        }
    });
    });
  }
  onunload() {
  }
};

function computeTaskTime(taskEventData) {
  let data = taskEventData.split(" ");
  let taskName = data[0];
  let totalSumInMinutes = 0;
  data.forEach((item, index) => {
    if (index === 0) {
      return;
    }
    let clocks = item.split("-");
    if (clocks.length != 2) {
      return;
    }
    totalSumInMinutes += clockDiffMinutes(clocks[0], clocks[1]);
  })
  return [taskName, totalSumInMinutes]
}

function clockToTime(clockString) {
  const now = new Date();
  const [hours, minutes] = clockString.split(":");
  return new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(hours), Number(minutes));
}

function clockDiffMinutes(before, after) {
  // 计算 "10:25"， "12:25" 这种时间相差多少小时，精确到小数点后1位数， 如果字符串中没有日期，则默认日期为当天，有日期则按照日期计算
  let totalSumInMinutes = 0;
  let befeoreTime = clockToTime(before);
  let afterTime = clockToTime(after);
  const diff = afterTime - befeoreTime;
  const diffInMinutes = Math.round(diff / 1000 / 60);
  return diffInMinutes;
}

function clockDiffHours(before, after) {
  // 计算 "10:25"， "12:25" 这种时间相差多少小时，精确到小数点后1位数， 如果字符串中没有日期，则默认日期为当天，有日期则按照日期计算
  let totalSumInMinutes = clockDiffMinutes(before, after);

  return minutesToHours(totalSumInMinutes);
} 

function minutesToHours(minutes, toFixed = 2) {
  // 分钟数转换为小时数，精确到小数点后两位
  const diffInHours = (minutes / 60).toFixed(toFixed);
  return diffInHours;
} 
